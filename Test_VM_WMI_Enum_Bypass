# PowerShell Script to Modify System Properties and CPU Information with Detailed Logging

# Define log file path
$logFile = "C:\SystemModificationLog.txt"

# Function to write logs
function Write-Log {
    param (
        [string]$message
    )
    try {
        Add-Content -Path $logFile -Value $message -ErrorAction Stop
    }
    catch {
        Write-Error "Failed to write log: $($_.Exception.Message)"
    }
}

# Initialize log file
if (Test-Path $logFile) {
    try {
        Clear-Content -Path $logFile -ErrorAction Stop
    }
    catch {
        Write-Error "Failed to clear the log file: $($_.Exception.Message)"
        exit
    }
} else {
    try {
        New-Item -Path $logFile -ItemType File -Force | Out-Null
    }
    catch {
        Write-Error "Failed to create log file: $($_.Exception.Message)"
        exit
    }
}

# Change Computer Manufacturer and Model
$regPathBIOS = "HKLM:\HARDWARE\DESCRIPTION\System\BIOS"
try {
    Set-ItemProperty -Path $regPathBIOS -Name "Manufacturer" -Value "GenuineIntel" -ErrorAction Stop
    Write-Log "Changed BIOS Manufacturer to 'GenuineIntel'."
    Set-ItemProperty -Path $regPathBIOS -Name "Version" -Value "1.0.0" -ErrorAction Stop
    Write-Log "Changed BIOS Version to '1.0.0'."
}
catch {
    Write-Log "Failed to modify BIOS registry properties: $_"
}

# Change Computer System Manufacturer and Model
$regPathOEM = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation"
try {
    Set-ItemProperty -Path $regPathOEM -Name "Manufacturer" -Value "Dell Inc." -ErrorAction Stop
    Write-Log "Changed OEM Manufacturer to 'Dell Inc.'."
    Set-ItemProperty -Path $regPathOEM -Name "Model" -Value "Inspiron 15" -ErrorAction Stop
    Write-Log "Changed OEM Model to 'Inspiron 15'."
}
catch {
    Write-Log "Failed to modify OEM registry properties: $_"
}

# Modify System Information
try {
    $compSys = Get-WmiObject -Class Win32_ComputerSystem -ErrorAction Stop
    foreach ($comp in $compSys) {
        $comp.Model = "Inspiron 15"
        $comp.Manufacturer = "Dell Inc."
        $result = $comp.Put()
        if ($result.ReturnValue -eq 0) {
            Write-Log "Updated Win32_ComputerSystem: Model to 'Inspiron 15', Manufacturer to 'Dell Inc.'."
        }
        else {
            Write-Log "Failed to update Win32_ComputerSystem: ReturnValue $($result.ReturnValue)"
        }
    }
}
catch {
    Write-Log "Failed to modify system information: $_"
}

# Modify BIOS Information
try {
    $biosInfo = Get-WmiObject -Class Win32_BIOS -ErrorAction Stop
    foreach ($bios in $biosInfo) {
        $bios.ReleaseDate = "2022-01-01T00:00:00Z"
        $bios.SerialNumber = "1234567890"
        $result = $bios.Put()
        if ($result.ReturnValue -eq 0) {
            Write-Log "Updated Win32_BIOS: ReleaseDate to '2022-01-01T00:00:00Z', SerialNumber to '1234567890'."
        }
        else {
            Write-Log "Failed to update Win32_BIOS: ReturnValue $($result.ReturnValue)"
        }
    }
}
catch {
    Write-Log "Failed to modify BIOS information: $_"
}

# Update Network Adapter (Fake Hardware ID)
try {
    $networkAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration
    foreach ($adapter in $networkAdapters) {
        if ($adapter.Description -like "*Virtual*") {
            $adapterDesc = "Intel(R) Ethernet Connection"
            Set-WmiInstance -Class Win32_NetworkAdapterConfiguration -Arguments @{
                Description = $adapterDesc
            } -ErrorAction Stop
            Write-Log "Updated network adapter description to 'Intel(R) Ethernet Connection'."
        }
    }
}
catch {
    Write-Log "Failed to update network adapter information: $_"
}

# Update Disk Controller (Example for VMware or Proxmox)
try {
    $diskControllers = Get-WmiObject -Class Win32_IDEController
    foreach ($controller in $diskControllers) {
        if ($controller.Description -like "*Virtual*") {
            $controllerDesc = "Standard Dual Channel PCI IDE Controller"
            Set-WmiInstance -Class Win32_IDEController -Arguments @{
                Description = $controllerDesc
            } -ErrorAction Stop
            Write-Log "Updated disk controller description to 'Standard Dual Channel PCI IDE Controller'."
        }
    }
}
catch {
    Write-Log "Failed to update disk controller information: $_"
}

# Modify CPU Information Registry Values
$cpuRegPath = "HKLM:\HARDWARE\DESCRIPTION\System\CentralProcessor\0"
try {
    Set-ItemProperty -Path $cpuRegPath -Name "ProcessorNameString" -Value "Intel Core i7-9700K" -ErrorAction Stop
    Write-Log "Changed ProcessorNameString to 'Intel Core i7-9700K'."
    Set-ItemProperty -Path $cpuRegPath -Name "ProcessorId" -Value "BFEBFBFF000906EC" -ErrorAction Stop
    Write-Log "Changed ProcessorId to 'BFEBFBFF000906EC'."
}
catch {
    Write-Log "Failed to modify CPU registry properties: $_"
}

# Optional: Hide Virtualization Extensions
try {
    $cpuInfo = Get-WmiObject -Class Win32_Processor
    foreach ($cpu in $cpuInfo) {
        Write-Log "CPU Information: $($cpu.Name), $($cpu.Manufacturer), $($cpu.MaxClockSpeed) MHz"
    }
}
catch {
    Write-Log "Failed to retrieve or modify CPU information: $_"
}

Write-Log "System properties and CPU information have been updated."
Write-Output "System properties and CPU information have been updated. Check the log file at $logFile for details."

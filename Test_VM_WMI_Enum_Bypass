# PowerShell Script to Modify System Properties

# Define error logging function
function Log-Error {
    param (
        [string]$message
    )
    Write-Error $message
}

# Change Computer Manufacturer and Model
$regPathBIOS = "HKLM:\HARDWARE\DESCRIPTION\System\BIOS"
try {
    Set-ItemProperty -Path $regPathBIOS -Name "Manufacturer" -Value "GenuineIntel" -ErrorAction Stop
    Set-ItemProperty -Path $regPathBIOS -Name "Version" -Value "1.0.0" -ErrorAction Stop
}
catch {
    Log-Error "Failed to modify BIOS registry properties: $_"
}

# Change Computer System Manufacturer and Model
$regPathOEM = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation"
try {
    Set-ItemProperty -Path $regPathOEM -Name "Manufacturer" -Value "Dell Inc." -ErrorAction Stop
    Set-ItemProperty -Path $regPathOEM -Name "Model" -Value "Inspiron 15" -ErrorAction Stop
}
catch {
    Log-Error "Failed to modify OEM registry properties: $_"
}

# Modify System Information
try {
    $sysInfo = New-Object -ComObject "WinMgmts://./root/cimv2"
    $compSys = $sysInfo.ExecQuery("Select * from Win32_ComputerSystem")
    foreach ($comp in $compSys) {
        $comp.Model = "Inspiron 15"
        $comp.Manufacturer = "Dell Inc."
        $result = $comp.Put()
        if ($result.ReturnValue -ne 0) {
            Log-Error "Failed to update Win32_ComputerSystem: $($result.ReturnValue)"
        }
    }
}
catch {
    Log-Error "Failed to modify system information: $_"
}

# Modify BIOS Information
try {
    $biosInfo = $sysInfo.ExecQuery("Select * from Win32_BIOS")
    foreach ($bios in $biosInfo) {
        $bios.ReleaseDate = "2022-01-01T00:00:00Z"
        $bios.SerialNumber = "1234567890"
        $result = $bios.Put()
        if ($result.ReturnValue -ne 0) {
            Log-Error "Failed to update Win32_BIOS: $($result.ReturnValue)"
        }
    }
}
catch {
    Log-Error "Failed to modify BIOS information: $_"
}

# Update Network Adapter (Fake Hardware ID)
try {
    $networkAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration
    foreach ($adapter in $networkAdapters) {
        if ($adapter.Description -like "*Virtual*") {
            $adapterDesc = "Intel(R) Ethernet Connection"
            Set-WmiInstance -Class Win32_NetworkAdapterConfiguration -Arguments @{
                Description = $adapterDesc
            } -ErrorAction Stop
        }
    }
}
catch {
    Log-Error "Failed to update network adapter information: $_"
}

# Update Disk Controller (Example for VMware or Proxmox)
try {
    $diskControllers = Get-WmiObject -Class Win32_IDEController
    foreach ($controller in $diskControllers) {
        if ($controller.Description -like "*Virtual*") {
            $controllerDesc = "Standard Dual Channel PCI IDE Controller"
            Set-WmiInstance -Class Win32_IDEController -Arguments @{
                Description = $controllerDesc
            } -ErrorAction Stop
        }
    }
}
catch {
    Log-Error "Failed to update disk controller information: $_"
}

# Optional: Hide Virtualization Extensions
try {
    $cpuInfo = Get-WmiObject -Class Win32_Processor
    foreach ($cpu in $cpuInfo) {
        # Modify CPU characteristics if necessary (note: direct modifications are not possible through WMI)
        # This is generally a place for informational purposes only
    }
}
catch {
    Log-Error "Failed to retrieve or modify CPU information: $_"
}

Write-Output "System properties have been updated."

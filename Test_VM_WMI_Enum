# Define output file
$outputFile = "C:\SystemInfoEnumeration.txt"

# Function to output information with error handling
function Write-OutputToFile {
    param (
        [string]$text
    )
    try {
        Add-Content -Path $outputFile -Value $text
    }
    catch {
        Write-Error "Failed to write to output file: $_"
    }
}

# Clear previous output
if (Test-Path $outputFile) {
    Clear-Content -Path $outputFile
} else {
    New-Item -Path $outputFile -ItemType File
}

# Gather system information

# Computer System Information
Write-OutputToFile "=== Computer System Information ==="
$compSysInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object Manufacturer, Model, TotalPhysicalMemory, NumberOfLogicalProcessors | Format-List
if ($compSysInfo) {
    Write-OutputToFile $compSysInfo | Out-String
} else {
    Write-OutputToFile "No data available for Win32_ComputerSystem."
}

# BIOS Information
Write-OutputToFile "=== BIOS Information ==="
$biosInfo = Get-WmiObject -Class Win32_BIOS | Select-Object Manufacturer, ReleaseDate, SerialNumber, Version | Format-List
if ($biosInfo) {
    Write-OutputToFile $biosInfo | Out-String
} else {
    Write-OutputToFile "No data available for Win32_BIOS."
}

# Processor Information
Write-OutputToFile "=== Processor Information ==="
$procInfo = Get-WmiObject -Class Win32_Processor | Select-Object Manufacturer, Name, MaxClockSpeed, NumberOfCores, NumberOfLogicalProcessors | Format-List
if ($procInfo) {
    Write-OutputToFile $procInfo | Out-String
} else {
    Write-OutputToFile "No data available for Win32_Processor."
}

# Network Adapters
Write-OutputToFile "=== Network Adapters ==="
$netAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Select-Object Description, MACAddress, ServiceName, PNPDeviceID | Format-List
if ($netAdapters) {
    Write-OutputToFile $netAdapters | Out-String
} else {
    Write-OutputToFile "No data available for Win32_NetworkAdapterConfiguration."
}

# Disk Drives
Write-OutputToFile "=== Disk Drives ==="
$diskDrives = Get-WmiObject -Class Win32_DiskDrive | Select-Object DeviceID, Model, InterfaceType, Size | Format-List
if ($diskDrives) {
    Write-OutputToFile $diskDrives | Out-String
} else {
    Write-OutputToFile "No data available for Win32_DiskDrive."
}

# IDE Controllers
Write-OutputToFile "=== IDE Controllers ==="
$ideControllers = Get-WmiObject -Class Win32_IDEController | Select-Object DeviceID, Manufacturer, Description | Format-List
if ($ideControllers) {
    Write-OutputToFile $ideControllers | Out-String
} else {
    Write-OutputToFile "No data available for Win32_IDEController."
}

# System Information from Systeminfo Command
Write-OutputToFile "=== System Information from Systeminfo Command ==="
try {
    $sysInfo = systeminfo | Out-String
    Write-OutputToFile $sysInfo
} catch {
    Write-OutputToFile "Failed to retrieve system information using systeminfo command."
}

# Registry Values
Write-OutputToFile "=== Registry Values ==="
$registryPaths = @(
    "HKLM:\HARDWARE\DESCRIPTION\System\BIOS",
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation"
)

foreach ($path in $registryPaths) {
    Write-OutputToFile "Registry Path: $path"
    try {
        $regValues = Get-ItemProperty -Path $path | Format-List | Out-String
        if ($regValues) {
            Write-OutputToFile $regValues
        } else {
            Write-OutputToFile "No data available for $path."
        }
    }
    catch {
        Write-OutputToFile "Failed to retrieve registry values for $path: $_"
    }
}

Write-OutputToFile "=== Completed Enumeration ==="

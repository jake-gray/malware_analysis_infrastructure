# Define output file
$outputFile = "C:\SystemInfoEnumeration.txt"

# Function to output information with error handling
function Write-OutputToFile {
    param (
        [string]$text
    )
    try {
        Add-Content -Path $outputFile -Value $text
    }
    catch {
        Write-Error "Failed to write to output file: $($_.Exception.Message)"
    }
}

# Initialize output file
if (Test-Path $outputFile) {
    try {
        Clear-Content -Path $outputFile
    }
    catch {
        Write-Error "Failed to clear the output file: $($_.Exception.Message)"
        exit
    }
} else {
    try {
        New-Item -Path $outputFile -ItemType File -Force | Out-Null
    }
    catch {
        Write-Error "Failed to create output file: $($_.Exception.Message)"
        exit
    }
}

# Gather system information

# Computer System Information
Write-OutputToFile "=== Computer System Information ==="
try {
    $compSysInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object Manufacturer, Model, TotalPhysicalMemory, NumberOfLogicalProcessors | Format-List
    if ($compSysInfo) {
        Write-OutputToFile $compSysInfo | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_ComputerSystem."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_ComputerSystem: $($_.Exception.Message)"
}

# BIOS Information
Write-OutputToFile "=== BIOS Information ==="
try {
    $biosInfo = Get-WmiObject -Class Win32_BIOS | Select-Object Manufacturer, ReleaseDate, SerialNumber, Version | Format-List
    if ($biosInfo) {
        Write-OutputToFile $biosInfo | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_BIOS."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_BIOS: $($_.Exception.Message)"
}

# Processor Information
Write-OutputToFile "=== Processor Information ==="
try {
    $procInfo = Get-WmiObject -Class Win32_Processor | Select-Object Manufacturer, Name, MaxClockSpeed, NumberOfCores, NumberOfLogicalProcessors | Format-List
    if ($procInfo) {
        Write-OutputToFile $procInfo | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_Processor."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_Processor: $($_.Exception.Message)"
}

# Network Adapters
Write-OutputToFile "=== Network Adapters ==="
try {
    $netAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Select-Object Description, MACAddress, ServiceName, PNPDeviceID | Format-List
    if ($netAdapters) {
        Write-OutputToFile $netAdapters | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_NetworkAdapterConfiguration."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_NetworkAdapterConfiguration: $($_.Exception.Message)"
}

# Disk Drives
Write-OutputToFile "=== Disk Drives ==="
try {
    $diskDrives = Get-WmiObject -Class Win32_DiskDrive | Select-Object DeviceID, Model, InterfaceType, Size | Format-List
    if ($diskDrives) {
        Write-OutputToFile $diskDrives | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_DiskDrive."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_DiskDrive: $($_.Exception.Message)"
}

# IDE Controllers
Write-OutputToFile "=== IDE Controllers ==="
try {
    $ideControllers = Get-WmiObject -Class Win32_IDEController | Select-Object DeviceID, Manufacturer, Description | Format-List
    if ($ideControllers) {
        Write-OutputToFile $ideControllers | Out-String
    } else {
        Write-OutputToFile "No data available for Win32_IDEController."
    }
}
catch {
    Write-OutputToFile "Error retrieving Win32_IDEController: $($_.Exception.Message)"
}

# System Information from Systeminfo Command
Write-OutputToFile "=== System Information from Systeminfo Command ==="
try {
    $sysInfo = systeminfo | Out-String
    if ($sysInfo) {
        Write-OutputToFile $sysInfo
    } else {
        Write-OutputToFile "No data available from systeminfo command."
    }
}
catch {
    Write-OutputToFile "Error retrieving system information using systeminfo command: $($_.Exception.Message)"
}

# Registry Values
Write-OutputToFile "=== Registry Values ==="
$registryPaths = @(
    "HKLM:\HARDWARE\DESCRIPTION\System\BIOS",
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation"
)

foreach ($path in $registryPaths) {
    Write-OutputToFile "Registry Path: $path"
    try {
        $regValues = Get-ItemProperty -Path $path | Format-List | Out-String
        if ($regValues) {
            Write-OutputToFile $regValues
        } else {
            Write-OutputToFile "No data available for $path."
        }
    }
    catch {
        Write-OutputToFile "Error retrieving registry values for $path: $($_.Exception.Message)"
    }
}

Write-OutputToFile "=== Completed Enumeration ==="

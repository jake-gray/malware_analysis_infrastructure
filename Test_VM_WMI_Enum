# Define output file
$outputFile = "C:\SystemInfoEnumeration.txt"

# Function to output information with error handling
function Write-OutputToFile {
    param (
        [string]$text
    )
    try {
        Add-Content -Path $outputFile -Value $text
    }
    catch {
        Write-Error "Failed to write to output file: $($_.Exception.Message)"
    }
}

# Initialize output file
if (Test-Path $outputFile) {
    try {
        Clear-Content -Path $outputFile
    }
    catch {
        Write-Error "Failed to clear the output file: $($_.Exception.Message)"
        exit
    }
} else {
    try {
        New-Item -Path $outputFile -ItemType File -Force | Out-Null
    }
    catch {
        Write-Error "Failed to create output file: $($_.Exception.Message)"
        exit
    }
}

# Helper function to convert WMI objects to text
function Convert-ObjectToText {
    param (
        [Parameter(Mandatory = $true)]
        [object]$object
    )
    $text = ""
    foreach ($property in $object.PSObject.Properties) {
        $text += "$($property.Name): $($property.Value)`r`n"
    }
    return $text
}

# Gather system information

# Computer System Information
Write-OutputToFile "=== Computer System Information ==="
try {
    $compSysInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object Manufacturer, Model, TotalPhysicalMemory, NumberOfLogicalProcessors
    if ($compSysInfo) {
        $compSysInfoText = Convert-ObjectToText -object $compSysInfo
        Write-OutputToFile $compSysInfoText
    } else {
        Write-OutputToFile "No data available for Win32_ComputerSystem."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_ComputerSystem: " + $_.Exception.Message)
}

# BIOS Information
Write-OutputToFile "=== BIOS Information ==="
try {
    $biosInfo = Get-WmiObject -Class Win32_BIOS | Select-Object Manufacturer, ReleaseDate, SerialNumber, Version
    if ($biosInfo) {
        $biosInfoText = Convert-ObjectToText -object $biosInfo
        Write-OutputToFile $biosInfoText
    } else {
        Write-OutputToFile "No data available for Win32_BIOS."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_BIOS: " + $_.Exception.Message)
}

# Processor Information
Write-OutputToFile "=== Processor Information ==="
try {
    $procInfo = Get-WmiObject -Class Win32_Processor | Select-Object Manufacturer, N

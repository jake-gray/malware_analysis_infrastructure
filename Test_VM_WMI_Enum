# Define output file
$outputFile = "C:\SystemInfoEnumeration.txt"

# Function to output information with error handling
function Write-OutputToFile {
    param (
        [string]$text
    )
    try {
        Add-Content -Path $outputFile -Value $text
    }
    catch {
        Write-Error "Failed to write to output file: $($_.Exception.Message)"
    }
}

# Initialize output file
if (Test-Path $outputFile) {
    try {
        Clear-Content -Path $outputFile
    }
    catch {
        Write-Error "Failed to clear the output file: $($_.Exception.Message)"
        exit
    }
} else {
    try {
        New-Item -Path $outputFile -ItemType File -Force | Out-Null
    }
    catch {
        Write-Error "Failed to create output file: $($_.Exception.Message)"
        exit
    }
}

# Helper function to convert WMI objects to text
function Convert-ObjectToText {
    param (
        [Parameter(Mandatory = $true)]
        [object]$object
    )
    $text = ""
    foreach ($property in $object.PSObject.Properties) {
        $text += "$($property.Name): $($property.Value)`r`n"
    }
    return $text
}

# Gather system information

# Computer System Information
Write-OutputToFile "=== Computer System Information ==="
try {
    $compSysInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object Manufacturer, Model, TotalPhysicalMemory, NumberOfLogicalProcessors
    if ($compSysInfo) {
        $compSysInfoText = Convert-ObjectToText -object $compSysInfo
        Write-OutputToFile $compSysInfoText
    } else {
        Write-OutputToFile "No data available for Win32_ComputerSystem."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_ComputerSystem: " + $_.Exception.Message)
}

# BIOS Information
Write-OutputToFile "=== BIOS Information ==="
try {
    $biosInfo = Get-WmiObject -Class Win32_BIOS | Select-Object Manufacturer, ReleaseDate, SerialNumber, Version
    if ($biosInfo) {
        $biosInfoText = Convert-ObjectToText -object $biosInfo
        Write-OutputToFile $biosInfoText
    } else {
        Write-OutputToFile "No data available for Win32_BIOS."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_BIOS: " + $_.Exception.Message)
}

# Processor Information
Write-OutputToFile "=== Processor Information ==="
try {
    $procInfo = Get-WmiObject -Class Win32_Processor | Select-Object Manufacturer, Name, MaxClockSpeed, NumberOfCores, NumberOfLogicalProcessors
    if ($procInfo) {
        $procInfoText = Convert-ObjectToText -object $procInfo
        Write-OutputToFile $procInfoText
    } else {
        Write-OutputToFile "No data available for Win32_Processor."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_Processor: " + $_.Exception.Message)
}

# Network Adapters
Write-OutputToFile "=== Network Adapters ==="
try {
    $netAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Select-Object Description, MACAddress, ServiceName, PNPDeviceID
    if ($netAdapters) {
        foreach ($adapter in $netAdapters) {
            $adapterText = Convert-ObjectToText -object $adapter
            Write-OutputToFile $adapterText
        }
    } else {
        Write-OutputToFile "No data available for Win32_NetworkAdapterConfiguration."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_NetworkAdapterConfiguration: " + $_.Exception.Message)
}

# Disk Drives
Write-OutputToFile "=== Disk Drives ==="
try {
    $diskDrives = Get-WmiObject -Class Win32_DiskDrive | Select-Object DeviceID, Model, InterfaceType, Size
    if ($diskDrives) {
        foreach ($drive in $diskDrives) {
            $driveText = Convert-ObjectToText -object $drive
            Write-OutputToFile $driveText
        }
    } else {
        Write-OutputToFile "No data available for Win32_DiskDrive."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_DiskDrive: " + $_.Exception.Message)
}

# IDE Controllers
Write-OutputToFile "=== IDE Controllers ==="
try {
    $ideControllers = Get-WmiObject -Class Win32_IDEController | Select-Object DeviceID, Manufacturer, Description
    if ($ideControllers) {
        foreach ($controller in $ideControllers) {
            $controllerText = Convert-ObjectToText -object $controller
            Write-OutputToFile $controllerText
        }
    } else {
        Write-OutputToFile "No data available for Win32_IDEController."
    }
}
catch {
    Write-OutputToFile ("Error retrieving Win32_IDEController: " + $_.Exception.Message)
}

# System Information from Systeminfo Command
Write-OutputToFile "=== System Information from Systeminfo Command ==="
try {
    $sysInfo = systeminfo | Out-String
    if ($sysInfo) {
        Write-OutputToFile $sysInfo
    } else {
        Write-OutputToFile "No data available from systeminfo command."
    }
}
catch {
    Write-OutputToFile ("Error retrieving system information using systeminfo command: " + $_.Exception.Message)
}

# Registry Values
Write-OutputToFile "=== Registry Values ==="
$registryPaths = @(
    "HKLM:\HARDWARE\DESCRIPTION\System\BIOS",
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation"
)

foreach ($path in $registryPaths) {
    Write-OutputToFile "Registry Path: $path"
    try {
        $regValues = Get-ItemProperty -Path $path
        if ($regValues) {
            $regValuesText = Convert-ObjectToText -object $regValues
            Write-OutputToFile $regValuesText
        } else {
            Write-OutputToFile "No data available for $path."
        }
    }
    catch {
        Write-OutputToFile ("Error retrieving registry values for " + $path + ": " + $_.Exception.Message)
    }
}

Write-OutputToFile "=== Completed Enumeration ==="
